name: CD (Post-merge)

on:
  push:
    branches: [main]

jobs:
  cd-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.8.1'

      - name: Install dependencies
        run: npm ci

      - name: Run CD tests
        run: npm run test

  semantic-release:
    runs-on: ubuntu-latest
    needs: [cd-test]
    env:
      IMAGE: abdosalah22/vois-explore-sre
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.8.1'

      - name: Install dependencies
        run: npm ci

      - name: Run semantic-release
        id: release
        run: |
          npx semantic-release
          VERSION=$(git describe --tags --abbrev=0)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image with version tag
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          docker build -t $IMAGE:${VERSION#v} -t $IMAGE:latest .
          docker push $IMAGE:${VERSION#v}
          docker push $IMAGE:latest

  helm-deploy-to-minikube:
    runs-on: ubuntu-latest
    needs: [semantic-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.14.0'

      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube version

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Deploy to Minikube
        run: |
          
          # Start Minikube cluster
          minikube start --driver=docker --memory=4096 --cpus=2
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          kubectl config use-context minikube
          
          # Verify cluster is running
          kubectl cluster-info
          kubectl get nodes
          
          # Get version from semantic-release
          VERSION=${{ needs.semantic-release.outputs.version }}
          IMAGE_TAG=${VERSION#v}
          IMAGE=abdosalah22/vois-explore-sre
          
          # Verify Docker image exists
          if ! docker pull ${IMAGE}:${IMAGE_TAG}; then
            echo "Error: Docker image ${IMAGE}:${IMAGE_TAG} not found"
            exit 1
          fi

          # Load Docker image into Minikube
          echo "Loading image: ${IMAGE}:${IMAGE_TAG}"
          minikube image load ${IMAGE}:${IMAGE_TAG}

          # Verify image is loaded
          minikube image ls | grep vois-explore || echo "Image not found in minikube"
          
          # Deploy using helm upgrade --install
          helm upgrade --install vois-explore ./helm-chart \
          --set image.tag=${IMAGE_TAG} \
          --namespace default
          
          # Show what is deployed
          helm get manifest vois-explore --namespace default
          
          # Wait for deployment to be ready
          kubectl wait --for=condition=Available deployment/vois-explore --timeout=300s

          # Wait for deployment with better error handling
          if ! kubectl wait --for=condition=Available deployment/vois-explore --timeout=300s; then
            echo "Deployment failed. Debugging..."
            kubectl get pods -l app.kubernetes.io/name=vois-explore
            kubectl describe pods -l app.kubernetes.io/name=vois-explore
            kubectl get events --sort-by=.metadata.creationTimestamp
            exit 1
          fi
          
          # Verify deployment
          kubectl get pods -l app.kubernetes.io/name=vois-explore
          kubectl get services
          
          echo "Minikube deployment completed successfully!"

  finish-message:
    runs-on: ubuntu-latest
    needs: [helm-deploy-to-minikube]
    steps:
      - name: Finish Message
        run: echo "Post-merge pipeline finished successfully. Application deployed!"