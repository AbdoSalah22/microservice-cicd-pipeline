name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  snyk-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run Snyk for dependencies and code
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  test:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '18'

        - name: Install dependencies
          run: npm ci

        - name: Run Jest tests
          run: npm run test

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: [snyk-scan, lint, test]
    env:
      IMAGE: abdosalah22/vois-explore-sre
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Derive version + sha tags from Git ref
        id: vars
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          if [ -z "$VERSION" ]; then VERSION="latest"; fi
          SHORT_SHA="$(echo "${GITHUB_SHA}" | cut -c1-7)"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t $IMAGE:${VERSION} -t $IMAGE:${SHORT_SHA} .

      - name: Push version + sha tags
        run: |
          docker push $IMAGE:${VERSION}
          docker push $IMAGE:${SHORT_SHA}

  finish-message:
    runs-on: ubuntu-latest
    needs: [snyk-scan, lint, test, docker-build-and-push]
    if: success()
    steps:
      - name: Finish Message
        run: echo "Pipeline finished successfully."