name: CI/CD Pipeline

on:
  push:
    branches: [dev]
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  lint:
    if: github.ref == 'refs/heads/dev' && !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  ci-test:
    if: github.ref == 'refs/heads/dev' && !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run Jest tests
        run: npm run test

  snyk-scan:
    if: github.ref == 'refs/heads/dev' && !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run Snyk for dependencies and code
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  docker-build-scan-push:
    if: github.ref == 'refs/heads/dev' && !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    needs: [snyk-scan, lint, ci-testtest]
    env:
      IMAGE: abdosalah22/vois-explore-sre
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Derive commit SHA tag
        id: vars
        run: |
          SHORT_SHA="$(echo "${GITHUB_SHA}" | cut -c1-7)"
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t $IMAGE:${SHORT_SHA} .

      - name: Trivy scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE }}:${{ env.SHORT_SHA }}
          exit-code: '1'
          severity: 'CRITICAL'

      - name: Push Docker image
        run: docker push $IMAGE:${SHORT_SHA}

  # Post-merge pipeline jobs
  cd-test:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run CD tests
        run: npm run test

  semantic-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: [cd-test]
    env:
      IMAGE: abdosalah22/vois-explore-sre
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run semantic-release
        id: release
        run: |
          npx semantic-release
          VERSION=$(git describe --tags --abbrev=0)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image with version tag
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          docker build -t $IMAGE:${VERSION} -t $IMAGE:latest .
          docker push $IMAGE:${VERSION}
          docker push $IMAGE:latest